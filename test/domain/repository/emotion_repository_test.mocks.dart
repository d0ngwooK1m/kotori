// Mocks generated by Mockito 5.3.2 from annotations
// in kotori/test/domain/repository/emotion_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:hive_flutter/hive_flutter.dart' as _i2;
import 'package:kotori/data/source/diary_entity.dart' as _i3;
import 'package:kotori/data/source/emotion_dao.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDiaryEntity_1 extends _i1.SmartFake implements _i3.DiaryEntity {
  _FakeDiaryEntity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EmotionDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmotionDao extends _i1.Mock implements _i4.EmotionDao {
  @override
  _i2.Box<_i3.DiaryEntity> get box => (super.noSuchMethod(
        Invocation.getter(#box),
        returnValue: _FakeBox_0<_i3.DiaryEntity>(
          this,
          Invocation.getter(#box),
        ),
        returnValueForMissingStub: _FakeBox_0<_i3.DiaryEntity>(
          this,
          Invocation.getter(#box),
        ),
      ) as _i2.Box<_i3.DiaryEntity>);
  @override
  _i5.Future<_i3.DiaryEntity> getDiary() => (super.noSuchMethod(
        Invocation.method(
          #getDiary,
          [],
        ),
        returnValue: _i5.Future<_i3.DiaryEntity>.value(_FakeDiaryEntity_1(
          this,
          Invocation.method(
            #getDiary,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.DiaryEntity>.value(_FakeDiaryEntity_1(
          this,
          Invocation.method(
            #getDiary,
            [],
          ),
        )),
      ) as _i5.Future<_i3.DiaryEntity>);
  @override
  _i5.Future<void> insertDiary(_i3.DiaryEntity? diary) => (super.noSuchMethod(
        Invocation.method(
          #insertDiary,
          [diary],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> editDiary(_i3.DiaryEntity? editedDiary) =>
      (super.noSuchMethod(
        Invocation.method(
          #editDiary,
          [editedDiary],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<Map<int, _i3.DiaryEntity>> getWeekDiaries({int? week = 0}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeekDiaries,
          [],
          {#week: week},
        ),
        returnValue: _i5.Future<Map<int, _i3.DiaryEntity>>.value(
            <int, _i3.DiaryEntity>{}),
        returnValueForMissingStub: _i5.Future<Map<int, _i3.DiaryEntity>>.value(
            <int, _i3.DiaryEntity>{}),
      ) as _i5.Future<Map<int, _i3.DiaryEntity>>);
}
