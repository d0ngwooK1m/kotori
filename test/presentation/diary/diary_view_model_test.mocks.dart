// Mocks generated by Mockito 5.3.2 from annotations
// in kotori/test/presentation/diary/diary_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:kotori/domain/model/diary.dart' as _i5;
import 'package:kotori/domain/repository/diary_repository.dart' as _i3;
import 'package:kotori/util/result.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DiaryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiaryRepository extends _i1.Mock implements _i3.DiaryRepository {
  @override
  _i4.Future<_i2.Result<_i5.Diary>> getDiary() => (super.noSuchMethod(
        Invocation.method(
          #getDiary,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Result<_i5.Diary>>.value(_FakeResult_0<_i5.Diary>(
          this,
          Invocation.method(
            #getDiary,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<_i5.Diary>>.value(_FakeResult_0<_i5.Diary>(
          this,
          Invocation.method(
            #getDiary,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.Diary>>);
  @override
  _i4.Future<_i2.Result<String>> insertDiary(_i5.Diary? diary) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertDiary,
          [diary],
        ),
        returnValue: _i4.Future<_i2.Result<String>>.value(_FakeResult_0<String>(
          this,
          Invocation.method(
            #insertDiary,
            [diary],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<String>>.value(_FakeResult_0<String>(
          this,
          Invocation.method(
            #insertDiary,
            [diary],
          ),
        )),
      ) as _i4.Future<_i2.Result<String>>);
  @override
  _i4.Future<_i2.Result<String>> editDiary(_i5.Diary? diary) =>
      (super.noSuchMethod(
        Invocation.method(
          #editDiary,
          [diary],
        ),
        returnValue: _i4.Future<_i2.Result<String>>.value(_FakeResult_0<String>(
          this,
          Invocation.method(
            #editDiary,
            [diary],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<String>>.value(_FakeResult_0<String>(
          this,
          Invocation.method(
            #editDiary,
            [diary],
          ),
        )),
      ) as _i4.Future<_i2.Result<String>>);
  @override
  _i4.Future<_i2.Result<Map<int, _i5.Diary>>> getWeekDiaries({int? week = 0}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeekDiaries,
          [],
          {#week: week},
        ),
        returnValue: _i4.Future<_i2.Result<Map<int, _i5.Diary>>>.value(
            _FakeResult_0<Map<int, _i5.Diary>>(
          this,
          Invocation.method(
            #getWeekDiaries,
            [],
            {#week: week},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<Map<int, _i5.Diary>>>.value(
                _FakeResult_0<Map<int, _i5.Diary>>(
          this,
          Invocation.method(
            #getWeekDiaries,
            [],
            {#week: week},
          ),
        )),
      ) as _i4.Future<_i2.Result<Map<int, _i5.Diary>>>);
}
